{"version":3,"sources":["components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/NoQuotesFound.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","components/quotes/NoQuotesFound.js","pages/AllQuotes.js"],"names":["module","exports","QuoteItem","props","className","classes","item","text","author","to","id","QuoteList","quotes","ascending","history","useHistory","location","useLocation","isSortingAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","sorting","onClick","push","pathname","list","map","quote","NoQuotesFound","noquotes","AllQuote","useHttp","getAllQuotes","sendRequest","status","loadedQuotes","data","error","useEffect","console","log","LoadingSpinner","length"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,mBCA3DD,EAAOC,QAAU,CAAC,SAAW,kC,wFCkBdC,EAhBG,SAACC,GACjB,OACE,qBAAIC,UAAWC,IAAQC,KAAvB,UACE,mCACE,qCACE,4BAAIH,EAAMI,SAEZ,qCAAaJ,EAAMK,YAErB,cAAC,IAAD,CAAMC,GAAE,kBAAaN,EAAMO,IAAMN,UAAU,MAA3C,iC,iBCyCSO,EArCG,SAACR,GACjB,IAXkBS,EAAQC,EAWpBC,EAAUC,cACVC,EAAWC,cAGXC,EAAkD,QADnC,IAAIC,gBAAgBH,EAASI,QACVC,IAAI,QAWtCC,GA1BYV,EA0BcT,EAAMS,OA1BZC,EA0BoBK,EAzBvCN,EAAOW,MAAK,SAACC,EAAQC,GAC1B,OAAIZ,EACKW,EAAOd,GAAKe,EAAOf,GAAK,GAAK,EAE7Bc,EAAOd,GAAKe,EAAOf,GAAK,GAAK,MAuBxC,OACE,eAAC,WAAD,WACE,qBAAKN,UAAWC,IAAQqB,QAAxB,SACE,yBAAQC,QAde,WAG3Bb,EAAQc,KAAK,CACXC,SAAUb,EAASa,SACnBT,OAAO,SAAD,OAAYF,EAAqB,OAAS,UAS9C,kBAA6CA,EAAqB,aAAe,iBAEnF,oBAAId,UAAWC,IAAQyB,KAAvB,SACGR,EAAaS,KAAI,SAACC,GAAD,OAChB,cAAC,EAAD,CAEEtB,GAAIsB,EAAMtB,GACVF,OAAQwB,EAAMxB,OACdD,KAAMyB,EAAMzB,MAHPyB,EAAMtB,a,yCC5BRuB,EAXO,WACpB,OACE,sBAAK7B,UAAWC,IAAQ6B,SAAxB,UACE,iDACA,cAAC,IAAD,CAAMzB,GAAG,aAAaL,UAAU,MAAhC,6BCoCS+B,UA/BE,WACb,MAA2DC,YAAQC,KAAc,GAAzEC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAcC,EAAnC,EAA6BC,KAAoBC,EAAjD,EAAiDA,MAQjD,OANAC,qBAAU,WACNL,MACD,CAACA,IAEJM,QAAQC,IAAIL,GAEG,YAAXD,EAEI,qBAAKnC,UAAU,WAAf,SACI,cAAC0C,EAAA,EAAD,MAIRJ,EAEI,qBAAKtC,UAAU,mBAAf,SAAmCsC,IAG5B,cAAXH,GAA4BC,GAAwC,IAAxBA,EAAaO,OAIzD,cAAC,WAAD,UACI,cAAC,EAAD,CAAWnC,OAAQ4B,MAJhB,cAAC,EAAD","file":"static/js/5.b1379374.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__3zV_L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__Uchs8\",\"sorting\":\"QuoteList_sorting__2MNfJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__3Itd5\"};","import classes from './QuoteItem.module.css';\nimport { Link } from 'react-router-dom';\n\nconst QuoteItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link to={`/quotes/${props.id}`} className='btn'>\n        View Fullscreen\n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { useState, Fragment } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\n\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n  const history = useHistory();\n  const location = useLocation();\n\n  const searchParams = new URLSearchParams(location.search);\n  const isSortingAscending = searchParams.get('sort') === 'asc';\n\n  const changeSortingHandler = () => {\n    // history.push('/quotes?sort=' + (isSortingAscending ? 'desc' : 'asc'));\n    // history.push(`${location.pathname}?sort=${(isSortingAscending ? 'desc' : 'asc')}`);\n    history.push({\n      pathname: location.pathname,\n      search: `?sort=${(isSortingAscending ? 'desc' : 'asc')}`\n    });\n  };\n\n  const sortedQuotes = sortQuotes(props.quotes, isSortingAscending);\n\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={changeSortingHandler}>Sort {isSortingAscending ? 'Descending' : 'Ascending'}</button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import { Link } from 'react-router-dom';\nimport classes from './NoQuotesFound.module.css';\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link to='/new-quote' className='btn'>\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","import { Fragment, useEffect } from 'react';\r\nimport QuoteList from '../components/quotes/QuoteList';\r\nimport useHttp from '../hooks/use-http';\r\nimport { getAllQuotes } from '../lib/api';\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\r\nimport NoQuotesFound from '../components/quotes/NoQuotesFound';\r\n\r\n// const DUMMY_QUOTES = [\r\n//     { id: 'q1', author: 'Max', text: 'Learning react is fun!' },\r\n//     { id: 'q2', author: 'Maximilian', text: 'Learning react is great!' }\r\n// ];\r\n\r\nconst AllQuote = () => {\r\n    const { sendRequest, status, data: loadedQuotes, error } = useHttp(getAllQuotes, true);\r\n\r\n    useEffect(() => {\r\n        sendRequest();\r\n    }, [sendRequest]);\r\n\r\n    console.log(loadedQuotes);\r\n\r\n    if (status === 'pending') {\r\n        return (\r\n            <div className=\"centered\">\r\n                <LoadingSpinner />\r\n            </div>\r\n        );\r\n    }\r\n    if (error) {\r\n        return (\r\n            <div className=\"centered focused\">{error}</div>\r\n        );\r\n    }\r\n    if (status === 'completed' && (!loadedQuotes || loadedQuotes.length === 0)) {\r\n        return <NoQuotesFound />;\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <QuoteList quotes={loadedQuotes} />\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default AllQuote;"],"sourceRoot":""}