{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","data","onAddedComment","useParams","useEffect","submitFormHandler","event","preventDefault","comment","current","value","quoteId","commentData","text","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","Comments","useState","isAddingComment","setIsAddingComment","params","getAllComments","addedCommentHandler","useCallback","length","console","log","onClick","HighlightedQuote","quote","author","QuoteDetail","match","useRouteMatch","getSingleQuote","path","exact","to","url"],"mappings":"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","file":"static/js/4.7f478817.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__18X6Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__35TaA\",\"loading\":\"NewCommentForm_loading__2BI1S\",\"control\":\"NewCommentForm_control__3qC8y\",\"actions\":\"NewCommentForm_actions__2IAcq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__1vLhB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__2l-nf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__1vekE\"};","import { useRef, useEffect } from 'react';\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport { useParams } from 'react-router-dom';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const { sendRequest, status, data, error } = useHttp(addComment);\n  const params = useParams();\n\n  const { onAddedComment } = props;\n  useEffect(() => {\n    if (status === 'completed' && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    // optional: Could validate here\n\n    // send comment to server\n    const comment = commentTextRef.current.value;\n    sendRequest({\n      // quoteId: params.quoteId,\n      quoteId: props.quoteId,\n      commentData: { text: comment }\n    });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && (\n        <div className=\"centered\"><LoadingSpinner /></div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport CommentsList from '../comments/CommentsList';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { sendRequest, status, data, error } = useHttp(getAllComments);\n\n  const { quoteId } = params;\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId])\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n  if (status === 'pending') {\n    comments = <div className=\"centered\"><LoadingSpinner /></div>;\n  }\n  if (status === 'completed' && (data && data.length > 0)) {\n    comments = <CommentsList comments={data} />;\n  }\n  if (status === 'completed' && (!data || data.length === 0)) {\n    comments = <p className='centered'>No comments were added yet!</p>;\n  }\n  console.log(data);\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm quoteId={quoteId} onAddedComment={addedCommentHandler} />}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { Fragment, useEffect } from \"react\";\r\nimport { Route, useParams, Link, useRouteMatch } from \"react-router-dom\";\r\nimport Comments from '../components/comments/Comments';\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote';\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from '../lib/api';\r\n\r\n// const DUMMY_QUOTES = [\r\n//     { id: 'q1', author: 'Max', text: 'Learning react is fun!' },\r\n//     { id: 'q2', author: 'Maximilian', text: 'Learning react is great!' }\r\n// ];\r\n\r\nconst QuoteDetail = () => {\r\n    const params = useParams();\r\n    const match = useRouteMatch();\r\n    const { sendRequest, status, data, error } = useHttp(getSingleQuote, true);\r\n\r\n    // console.log(match);\r\n\r\n    // const quote = DUMMY_QUOTES.find(quote => quote.id === params.quoteId);\r\n    const { quoteId } = params;\r\n    useEffect(() => {\r\n        sendRequest(quoteId);\r\n    }, [sendRequest, quoteId]);\r\n\r\n    if (status === 'pending') {\r\n        return (\r\n            <div className=\"centered\">\r\n                <LoadingSpinner />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (error) {\r\n        return <div className=\"centered\">{error}</div>;\r\n    }\r\n\r\n    if (!data.text) {\r\n        return <p>No quote found!</p>;\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <HighlightedQuote text={data.text} author={data.author} />\r\n            <Route path={match.path} exact>\r\n                {/* <Route path='/quotes/:quoteId' exact> */}\r\n                <div className='centered'>\r\n                    {/* <Link className='btn--flat' to={`/quotes/${params.quoteId}/comments`}> */}\r\n                    <Link className='btn--flat' to={`${match.url}/comments`}>\r\n                        load comments\r\n                    </Link>\r\n                </div>\r\n            </Route>\r\n            {/* <Route path={`/quotes/${params.quoteId}/comments`}> */}\r\n            <Route path={`${match.path}/comments`}>\r\n                {/* <Route path='/quotes/:quoteId/comments'> */}\r\n                <Comments />\r\n            </Route>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default QuoteDetail;"],"sourceRoot":""}