{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/NewQuote.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","authorInputRef","useRef","textInputRef","useState","isEntering","setIsEntering","when","message","location","onFocus","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","required","rows","actions","onClick","NewQuote","history","useHistory","useHttp","addQuote","sendRequest","status","data","error","useEffect","push","quoteData","console","log"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,yFCKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,yBCyD/BC,EArDG,SAACL,GACjB,IAAMM,EAAiBC,mBACjBC,EAAeD,mBACrB,EAAoCE,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAmBA,OACE,eAAC,WAAD,WACE,cAAC,IAAD,CACEC,KAAMF,EACNG,QAAS,SAACC,GAAD,MAAc,yEAEzB,cAAC,EAAD,UACE,uBAAMC,QAbe,WACzBJ,GAAc,IAYyBV,UAAWC,IAAQc,KAAMC,SAxBlE,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBd,EAAee,QAAQC,MACvCC,EAAcf,EAAaa,QAAQC,MAIzCtB,EAAMwB,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,KAgB5C,UACGvB,EAAM2B,WACL,qBAAK1B,UAAWC,IAAQ0B,QAAxB,SACE,cAACC,EAAA,EAAD,MAIJ,sBAAK5B,UAAWC,IAAQ4B,QAAxB,UACE,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAK5B,EAAgB6B,UAAQ,OAE9D,sBAAKlC,UAAWC,IAAQ4B,QAAxB,UACE,uBAAOC,QAAQ,OAAf,kBACA,0BAAUE,GAAG,OAAOG,KAAK,IAAIF,IAAK1B,EAAc2B,UAAQ,OAE1D,qBAAKlC,UAAWC,IAAQmC,QAAxB,SACE,wBAAQC,QA1BY,WAC5B3B,GAAc,IAyBkCV,UAAU,MAAlD,kC,gBCnBGsC,UA3BE,WACb,IAAMC,EAAUC,cAEhB,EAKIC,YAAQC,KAJRC,EADJ,EACIA,YACAC,EAFJ,EAEIA,OAFJ,EAGIC,KAHJ,EAIIC,MAGJC,qBAAU,WACS,cAAXH,GACAL,EAAQS,KAAK,aAElB,CAACJ,EAAQL,IAQZ,OACI,cAAC,EAAD,CAAWb,UAAsB,YAAXkB,EAAsBrB,WAPxB,SAAA0B,GACpBC,QAAQC,IAAIF,GACZN,EAAYM","file":"static/js/6.0e0bf464.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1uyr1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__1mzCm\",\"loading\":\"QuoteForm_loading__ORTOE\",\"control\":\"QuoteForm_control__OZDdU\",\"actions\":\"QuoteForm_actions__1F-CO\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { Fragment, useRef, useState } from 'react';\nimport { Prompt } from 'react-router';\n\nimport Card from '../UI/Card';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './QuoteForm.module.css';\n\nconst QuoteForm = (props) => {\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n  const [isEntering, setIsEntering] = useState(false);\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  const formFocusedHandler = () => {\n    setIsEntering(true);\n  };\n  const finishEnteringHandler = () => {\n    setIsEntering(false);\n  };\n  return (\n    <Fragment>\n      <Prompt\n        when={isEntering}\n        message={(location) => 'Are you sure you want to leave? All your entered data will be lost!'}\n      />\n      <Card>\n        <form onFocus={formFocusedHandler} className={classes.form} onSubmit={submitFormHandler}>\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor='author'>Author</label>\n            <input type='text' id='author' ref={authorInputRef} required />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor='text'>Text</label>\n            <textarea id='text' rows='5' ref={textInputRef} required></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button onClick={finishEnteringHandler} className='btn'>Add Quote</button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import { useEffect } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport QuoteForm from '../components/quotes/QuoteForm';\r\nimport useHttp from '../hooks/use-http';\r\nimport { addQuote } from '../lib/api';\r\n\r\nconst NewQuote = () => {\r\n    const history = useHistory();\r\n\r\n    const {\r\n        sendRequest,\r\n        status,\r\n        data,\r\n        error\r\n    } = useHttp(addQuote);\r\n\r\n    useEffect(() => {\r\n        if (status === 'completed') {\r\n            history.push('/quotes');\r\n        }\r\n    }, [status, history]);\r\n\r\n    const addQuoteHandler = quoteData => {\r\n        console.log(quoteData);\r\n        sendRequest(quoteData);\r\n        // history.push('/quotes');\r\n    };\r\n\r\n    return (\r\n        <QuoteForm isLoading={status === 'pending'} onAddQuote={addQuoteHandler} />\r\n    );\r\n};\r\n\r\nexport default NewQuote;"],"sourceRoot":""}